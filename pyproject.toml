[project]
name = "azure-mcp-servers"
version = "0.1.0"
description = "MCP Servers for Azure"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Ramz", email = "ramz@techniumlabs.io"},
]

dependencies = [
    "azure-identity>=1.23.0",
    "azure-mgmt-datafactory>=9.2.0",
    "logfire[fastapi]>=3.21.1",
    "loguru>=0.7.3",
    "mcp[cli]>=1.9.4",
    "python-dotenv>=1.0.0",
    "requests>=2.31.0",
]

[dependency-groups]
dev = [
    "commitizen>=4.8.3",
    "pre-commit>=4.2.0",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "ruff>=0.12.0"
]

[project.scripts]
"tl.azure-data-factory-mcp" = "tl.azure_data_factory_mcp_server.server:main"
"tl.azure-devops-mcp" = "tl.azure_devops_mcp_server.server:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

[tool.ruff]
line-length = 99
extend-include = ["*.ipynb"]
exclude = [
    ".venv",
    "**/__pycache__",
    "**/node_modules",
    "**/dist",
    "**/build",
    "**/env",
    "**/.ruff_cache",
    "**/.venv",
    "**/.ipynb_checkpoints"
]
force-exclude = true

[tool.ruff.lint]
exclude = ["__init__.py"]
select = ["C", "D", "E", "F", "I", "W"]
ignore = ["C901", "E501", "E741", "F402", "F823", "D100", "D106"]

[tool.ruff.lint.isort]
lines-after-imports = 2
no-sections = true

[tool.ruff.lint.per-file-ignores]
"**/*.ipynb" = ["F704"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "single"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true

[tool.pyright]
include = ["tl", "tests"]
exclude = ["**/__pycache__", "**/.venv", "**/node_modules", "**/dist", "**/build"]

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "tl/azure_data_factory_mcp_server/__init__.py:__version__"
]
update_changelog_on_bump = true

[tool.hatch.build.targets.wheel]
packages = ["tl"]

[tool.bandit]
exclude_dirs = ["venv", ".venv", "tests"]

[tool.pytest.ini_options]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
testpaths = [ "tests"]
asyncio_mode = "auto"
markers = [
    "live: marks tests that make live API calls (deselect with '-m \"not live\"')",
    "asyncio: marks tests that use asyncio"
]

[tool.coverage.report]
exclude_also = [
    'pragma: no cover',
    'if __name__ == .__main__.:\n    main()',
]

[tool.coverage.run]
source = ["tl"]
